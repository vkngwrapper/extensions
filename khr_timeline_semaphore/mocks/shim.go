// Code generated by MockGen. DO NOT EDIT.
// Source: shim.go

// Package mock_timeline_semaphore is a generated GoMock package.
package mock_timeline_semaphore

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	common "github.com/vkngwrapper/core/v2/common"
	core1_2 "github.com/vkngwrapper/core/v2/core1_2"
)

// MockSemaphoreShim is a mock of SemaphoreShim interface.
type MockSemaphoreShim struct {
	ctrl     *gomock.Controller
	recorder *MockSemaphoreShimMockRecorder
}

// MockSemaphoreShimMockRecorder is the mock recorder for MockSemaphoreShim.
type MockSemaphoreShimMockRecorder struct {
	mock *MockSemaphoreShim
}

// NewMockSemaphoreShim creates a new mock instance.
func NewMockSemaphoreShim(ctrl *gomock.Controller) *MockSemaphoreShim {
	mock := &MockSemaphoreShim{ctrl: ctrl}
	mock.recorder = &MockSemaphoreShimMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSemaphoreShim) EXPECT() *MockSemaphoreShimMockRecorder {
	return m.recorder
}

// CounterValue mocks base method.
func (m *MockSemaphoreShim) CounterValue() (uint64, common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CounterValue")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(common.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CounterValue indicates an expected call of CounterValue.
func (mr *MockSemaphoreShimMockRecorder) CounterValue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CounterValue", reflect.TypeOf((*MockSemaphoreShim)(nil).CounterValue))
}

// MockDeviceShim is a mock of DeviceShim interface.
type MockDeviceShim struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceShimMockRecorder
}

// MockDeviceShimMockRecorder is the mock recorder for MockDeviceShim.
type MockDeviceShimMockRecorder struct {
	mock *MockDeviceShim
}

// NewMockDeviceShim creates a new mock instance.
func NewMockDeviceShim(ctrl *gomock.Controller) *MockDeviceShim {
	mock := &MockDeviceShim{ctrl: ctrl}
	mock.recorder = &MockDeviceShimMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceShim) EXPECT() *MockDeviceShimMockRecorder {
	return m.recorder
}

// SignalSemaphore mocks base method.
func (m *MockDeviceShim) SignalSemaphore(o core1_2.SemaphoreSignalInfo) (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignalSemaphore", o)
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignalSemaphore indicates an expected call of SignalSemaphore.
func (mr *MockDeviceShimMockRecorder) SignalSemaphore(o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignalSemaphore", reflect.TypeOf((*MockDeviceShim)(nil).SignalSemaphore), o)
}

// WaitSemaphores mocks base method.
func (m *MockDeviceShim) WaitSemaphores(timeout time.Duration, o core1_2.SemaphoreWaitInfo) (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitSemaphores", timeout, o)
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitSemaphores indicates an expected call of WaitSemaphores.
func (mr *MockDeviceShimMockRecorder) WaitSemaphores(timeout, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitSemaphores", reflect.TypeOf((*MockDeviceShim)(nil).WaitSemaphores), timeout, o)
}
