// Code generated by MockGen. DO NOT EDIT.
// Source: messenger.go

// Package mock_debugutils is a generated GoMock package.
package mock_debugutils

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	driver "github.com/vkngwrapper/core/v2/driver"
	ext_debug_utils_driver "github.com/vkngwrapper/extensions/v2/ext_debug_utils/driver"
)

// MockDebugUtilsMessenger is a mock of DebugUtilsMessenger interface.
type MockDebugUtilsMessenger struct {
	ctrl     *gomock.Controller
	recorder *MockDebugUtilsMessengerMockRecorder
}

// MockDebugUtilsMessengerMockRecorder is the mock recorder for MockDebugUtilsMessenger.
type MockDebugUtilsMessengerMockRecorder struct {
	mock *MockDebugUtilsMessenger
}

// NewMockDebugUtilsMessenger creates a new mock instance.
func NewMockDebugUtilsMessenger(ctrl *gomock.Controller) *MockDebugUtilsMessenger {
	mock := &MockDebugUtilsMessenger{ctrl: ctrl}
	mock.recorder = &MockDebugUtilsMessengerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDebugUtilsMessenger) EXPECT() *MockDebugUtilsMessengerMockRecorder {
	return m.recorder
}

// Destroy mocks base method.
func (m *MockDebugUtilsMessenger) Destroy(callbacks *driver.AllocationCallbacks) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy", callbacks)
}

// Destroy indicates an expected call of Destroy.
func (mr *MockDebugUtilsMessengerMockRecorder) Destroy(callbacks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockDebugUtilsMessenger)(nil).Destroy), callbacks)
}

// Handle mocks base method.
func (m *MockDebugUtilsMessenger) Handle() ext_debug_utils_driver.VkDebugUtilsMessengerEXT {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(ext_debug_utils_driver.VkDebugUtilsMessengerEXT)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockDebugUtilsMessengerMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockDebugUtilsMessenger)(nil).Handle))
}
