// Code generated by MockGen. DO NOT EDIT.
// Source: extension.go

// Package mock_debugutils is a generated GoMock package.
package mock_debugutils

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	common "github.com/vkngwrapper/core/common"
	core1_0 "github.com/vkngwrapper/core/core1_0"
	driver "github.com/vkngwrapper/core/driver"
	ext_debug_utils "github.com/vkngwrapper/extensions/ext_debug_utils"
)

// MockExtension is a mock of Extension interface.
type MockExtension struct {
	ctrl     *gomock.Controller
	recorder *MockExtensionMockRecorder
}

// MockExtensionMockRecorder is the mock recorder for MockExtension.
type MockExtensionMockRecorder struct {
	mock *MockExtension
}

// NewMockExtension creates a new mock instance.
func NewMockExtension(ctrl *gomock.Controller) *MockExtension {
	mock := &MockExtension{ctrl: ctrl}
	mock.recorder = &MockExtensionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExtension) EXPECT() *MockExtensionMockRecorder {
	return m.recorder
}

// CmdBeginDebugUtilsLabel mocks base method.
func (m *MockExtension) CmdBeginDebugUtilsLabel(commandBuffer core1_0.CommandBuffer, label ext_debug_utils.DebugUtilsLabel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CmdBeginDebugUtilsLabel", commandBuffer, label)
	ret0, _ := ret[0].(error)
	return ret0
}

// CmdBeginDebugUtilsLabel indicates an expected call of CmdBeginDebugUtilsLabel.
func (mr *MockExtensionMockRecorder) CmdBeginDebugUtilsLabel(commandBuffer, label interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdBeginDebugUtilsLabel", reflect.TypeOf((*MockExtension)(nil).CmdBeginDebugUtilsLabel), commandBuffer, label)
}

// CmdEndDebugUtilsLabel mocks base method.
func (m *MockExtension) CmdEndDebugUtilsLabel(commandBuffer core1_0.CommandBuffer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdEndDebugUtilsLabel", commandBuffer)
}

// CmdEndDebugUtilsLabel indicates an expected call of CmdEndDebugUtilsLabel.
func (mr *MockExtensionMockRecorder) CmdEndDebugUtilsLabel(commandBuffer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdEndDebugUtilsLabel", reflect.TypeOf((*MockExtension)(nil).CmdEndDebugUtilsLabel), commandBuffer)
}

// CmdInsertDebugUtilsLabel mocks base method.
func (m *MockExtension) CmdInsertDebugUtilsLabel(commandBuffer core1_0.CommandBuffer, label ext_debug_utils.DebugUtilsLabel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CmdInsertDebugUtilsLabel", commandBuffer, label)
	ret0, _ := ret[0].(error)
	return ret0
}

// CmdInsertDebugUtilsLabel indicates an expected call of CmdInsertDebugUtilsLabel.
func (mr *MockExtensionMockRecorder) CmdInsertDebugUtilsLabel(commandBuffer, label interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdInsertDebugUtilsLabel", reflect.TypeOf((*MockExtension)(nil).CmdInsertDebugUtilsLabel), commandBuffer, label)
}

// CreateDebugUtilsMessenger mocks base method.
func (m *MockExtension) CreateDebugUtilsMessenger(instance core1_0.Instance, allocator *driver.AllocationCallbacks, o ext_debug_utils.DebugUtilsMessengerCreateInfo) (ext_debug_utils.DebugUtilsMessenger, common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDebugUtilsMessenger", instance, allocator, o)
	ret0, _ := ret[0].(ext_debug_utils.DebugUtilsMessenger)
	ret1, _ := ret[1].(common.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateDebugUtilsMessenger indicates an expected call of CreateDebugUtilsMessenger.
func (mr *MockExtensionMockRecorder) CreateDebugUtilsMessenger(instance, allocator, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDebugUtilsMessenger", reflect.TypeOf((*MockExtension)(nil).CreateDebugUtilsMessenger), instance, allocator, o)
}

// QueueBeginDebugUtilsLabel mocks base method.
func (m *MockExtension) QueueBeginDebugUtilsLabel(queue core1_0.Queue, label ext_debug_utils.DebugUtilsLabel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueBeginDebugUtilsLabel", queue, label)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueBeginDebugUtilsLabel indicates an expected call of QueueBeginDebugUtilsLabel.
func (mr *MockExtensionMockRecorder) QueueBeginDebugUtilsLabel(queue, label interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueBeginDebugUtilsLabel", reflect.TypeOf((*MockExtension)(nil).QueueBeginDebugUtilsLabel), queue, label)
}

// QueueEndDebugUtilsLabel mocks base method.
func (m *MockExtension) QueueEndDebugUtilsLabel(queue core1_0.Queue) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "QueueEndDebugUtilsLabel", queue)
}

// QueueEndDebugUtilsLabel indicates an expected call of QueueEndDebugUtilsLabel.
func (mr *MockExtensionMockRecorder) QueueEndDebugUtilsLabel(queue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueEndDebugUtilsLabel", reflect.TypeOf((*MockExtension)(nil).QueueEndDebugUtilsLabel), queue)
}

// QueueInsertDebugUtilsLabel mocks base method.
func (m *MockExtension) QueueInsertDebugUtilsLabel(queue core1_0.Queue, label ext_debug_utils.DebugUtilsLabel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueInsertDebugUtilsLabel", queue, label)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueInsertDebugUtilsLabel indicates an expected call of QueueInsertDebugUtilsLabel.
func (mr *MockExtensionMockRecorder) QueueInsertDebugUtilsLabel(queue, label interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueInsertDebugUtilsLabel", reflect.TypeOf((*MockExtension)(nil).QueueInsertDebugUtilsLabel), queue, label)
}

// SetDebugUtilsObjectName mocks base method.
func (m *MockExtension) SetDebugUtilsObjectName(device core1_0.Device, name ext_debug_utils.DebugUtilsObjectNameInfo) (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDebugUtilsObjectName", device, name)
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetDebugUtilsObjectName indicates an expected call of SetDebugUtilsObjectName.
func (mr *MockExtensionMockRecorder) SetDebugUtilsObjectName(device, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDebugUtilsObjectName", reflect.TypeOf((*MockExtension)(nil).SetDebugUtilsObjectName), device, name)
}

// SetDebugUtilsObjectTag mocks base method.
func (m *MockExtension) SetDebugUtilsObjectTag(device core1_0.Device, tag ext_debug_utils.DebugUtilsObjectTagInfo) (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDebugUtilsObjectTag", device, tag)
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetDebugUtilsObjectTag indicates an expected call of SetDebugUtilsObjectTag.
func (mr *MockExtensionMockRecorder) SetDebugUtilsObjectTag(device, tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDebugUtilsObjectTag", reflect.TypeOf((*MockExtension)(nil).SetDebugUtilsObjectTag), device, tag)
}

// SubmitDebugUtilsMessage mocks base method.
func (m *MockExtension) SubmitDebugUtilsMessage(instance core1_0.Instance, severity ext_debug_utils.DebugUtilsMessageSeverityFlags, types ext_debug_utils.DebugUtilsMessageTypeFlags, data ext_debug_utils.DebugUtilsMessengerCallbackData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitDebugUtilsMessage", instance, severity, types, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitDebugUtilsMessage indicates an expected call of SubmitDebugUtilsMessage.
func (mr *MockExtensionMockRecorder) SubmitDebugUtilsMessage(instance, severity, types, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitDebugUtilsMessage", reflect.TypeOf((*MockExtension)(nil).SubmitDebugUtilsMessage), instance, severity, types, data)
}
