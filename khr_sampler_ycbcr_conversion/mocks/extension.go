// Code generated by MockGen. DO NOT EDIT.
// Source: extiface.go

// Package mock_sampler_ycbcr_conversion is a generated GoMock package.
package mock_sampler_ycbcr_conversion

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	common "github.com/vkngwrapper/core/v2/common"
	core1_0 "github.com/vkngwrapper/core/v2/core1_0"
	driver "github.com/vkngwrapper/core/v2/driver"
	khr_sampler_ycbcr_conversion "github.com/vkngwrapper/extensions/v2/khr_sampler_ycbcr_conversion"
	khr_sampler_ycbcr_conversion_driver "github.com/vkngwrapper/extensions/v2/khr_sampler_ycbcr_conversion/driver"
)

// MockSamplerYcbcrConversion is a mock of SamplerYcbcrConversion interface.
type MockSamplerYcbcrConversion struct {
	ctrl     *gomock.Controller
	recorder *MockSamplerYcbcrConversionMockRecorder
}

// MockSamplerYcbcrConversionMockRecorder is the mock recorder for MockSamplerYcbcrConversion.
type MockSamplerYcbcrConversionMockRecorder struct {
	mock *MockSamplerYcbcrConversion
}

// NewMockSamplerYcbcrConversion creates a new mock instance.
func NewMockSamplerYcbcrConversion(ctrl *gomock.Controller) *MockSamplerYcbcrConversion {
	mock := &MockSamplerYcbcrConversion{ctrl: ctrl}
	mock.recorder = &MockSamplerYcbcrConversionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSamplerYcbcrConversion) EXPECT() *MockSamplerYcbcrConversionMockRecorder {
	return m.recorder
}

// APIVersion mocks base method.
func (m *MockSamplerYcbcrConversion) APIVersion() common.APIVersion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIVersion")
	ret0, _ := ret[0].(common.APIVersion)
	return ret0
}

// APIVersion indicates an expected call of APIVersion.
func (mr *MockSamplerYcbcrConversionMockRecorder) APIVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIVersion", reflect.TypeOf((*MockSamplerYcbcrConversion)(nil).APIVersion))
}

// Destroy mocks base method.
func (m *MockSamplerYcbcrConversion) Destroy(allocator *driver.AllocationCallbacks) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy", allocator)
}

// Destroy indicates an expected call of Destroy.
func (mr *MockSamplerYcbcrConversionMockRecorder) Destroy(allocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockSamplerYcbcrConversion)(nil).Destroy), allocator)
}

// DeviceHandle mocks base method.
func (m *MockSamplerYcbcrConversion) DeviceHandle() driver.VkDevice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceHandle")
	ret0, _ := ret[0].(driver.VkDevice)
	return ret0
}

// DeviceHandle indicates an expected call of DeviceHandle.
func (mr *MockSamplerYcbcrConversionMockRecorder) DeviceHandle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceHandle", reflect.TypeOf((*MockSamplerYcbcrConversion)(nil).DeviceHandle))
}

// Driver mocks base method.
func (m *MockSamplerYcbcrConversion) Driver() driver.Driver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Driver")
	ret0, _ := ret[0].(driver.Driver)
	return ret0
}

// Driver indicates an expected call of Driver.
func (mr *MockSamplerYcbcrConversionMockRecorder) Driver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Driver", reflect.TypeOf((*MockSamplerYcbcrConversion)(nil).Driver))
}

// Handle mocks base method.
func (m *MockSamplerYcbcrConversion) Handle() khr_sampler_ycbcr_conversion_driver.VkSamplerYcbcrConversionKHR {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(khr_sampler_ycbcr_conversion_driver.VkSamplerYcbcrConversionKHR)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockSamplerYcbcrConversionMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockSamplerYcbcrConversion)(nil).Handle))
}

// MockExtension is a mock of Extension interface.
type MockExtension struct {
	ctrl     *gomock.Controller
	recorder *MockExtensionMockRecorder
}

// MockExtensionMockRecorder is the mock recorder for MockExtension.
type MockExtensionMockRecorder struct {
	mock *MockExtension
}

// NewMockExtension creates a new mock instance.
func NewMockExtension(ctrl *gomock.Controller) *MockExtension {
	mock := &MockExtension{ctrl: ctrl}
	mock.recorder = &MockExtensionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExtension) EXPECT() *MockExtensionMockRecorder {
	return m.recorder
}

// CreateSamplerYcbcrConversion mocks base method.
func (m *MockExtension) CreateSamplerYcbcrConversion(device core1_0.Device, o khr_sampler_ycbcr_conversion.SamplerYcbcrConversionCreateInfo, allocator *driver.AllocationCallbacks) (khr_sampler_ycbcr_conversion.SamplerYcbcrConversion, common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSamplerYcbcrConversion", device, o, allocator)
	ret0, _ := ret[0].(khr_sampler_ycbcr_conversion.SamplerYcbcrConversion)
	ret1, _ := ret[1].(common.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateSamplerYcbcrConversion indicates an expected call of CreateSamplerYcbcrConversion.
func (mr *MockExtensionMockRecorder) CreateSamplerYcbcrConversion(device, o, allocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSamplerYcbcrConversion", reflect.TypeOf((*MockExtension)(nil).CreateSamplerYcbcrConversion), device, o, allocator)
}
