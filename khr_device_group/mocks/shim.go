// Code generated by MockGen. DO NOT EDIT.
// Source: shim.go

// Package mock_device_group is a generated GoMock package.
package mock_device_group

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	core1_1 "github.com/vkngwrapper/core/v2/core1_1"
)

// MockCommandBufferShim is a mock of CommandBufferShim interface.
type MockCommandBufferShim struct {
	ctrl     *gomock.Controller
	recorder *MockCommandBufferShimMockRecorder
}

// MockCommandBufferShimMockRecorder is the mock recorder for MockCommandBufferShim.
type MockCommandBufferShimMockRecorder struct {
	mock *MockCommandBufferShim
}

// NewMockCommandBufferShim creates a new mock instance.
func NewMockCommandBufferShim(ctrl *gomock.Controller) *MockCommandBufferShim {
	mock := &MockCommandBufferShim{ctrl: ctrl}
	mock.recorder = &MockCommandBufferShimMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandBufferShim) EXPECT() *MockCommandBufferShimMockRecorder {
	return m.recorder
}

// CmdDispatchBase mocks base method.
func (m *MockCommandBufferShim) CmdDispatchBase(baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdDispatchBase", baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ)
}

// CmdDispatchBase indicates an expected call of CmdDispatchBase.
func (mr *MockCommandBufferShimMockRecorder) CmdDispatchBase(baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdDispatchBase", reflect.TypeOf((*MockCommandBufferShim)(nil).CmdDispatchBase), baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ)
}

// CmdSetDeviceMask mocks base method.
func (m *MockCommandBufferShim) CmdSetDeviceMask(deviceMask uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdSetDeviceMask", deviceMask)
}

// CmdSetDeviceMask indicates an expected call of CmdSetDeviceMask.
func (mr *MockCommandBufferShimMockRecorder) CmdSetDeviceMask(deviceMask interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdSetDeviceMask", reflect.TypeOf((*MockCommandBufferShim)(nil).CmdSetDeviceMask), deviceMask)
}

// MockDeviceShim is a mock of DeviceShim interface.
type MockDeviceShim struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceShimMockRecorder
}

// MockDeviceShimMockRecorder is the mock recorder for MockDeviceShim.
type MockDeviceShimMockRecorder struct {
	mock *MockDeviceShim
}

// NewMockDeviceShim creates a new mock instance.
func NewMockDeviceShim(ctrl *gomock.Controller) *MockDeviceShim {
	mock := &MockDeviceShim{ctrl: ctrl}
	mock.recorder = &MockDeviceShimMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceShim) EXPECT() *MockDeviceShimMockRecorder {
	return m.recorder
}

// DeviceGroupPeerMemoryFeatures mocks base method.
func (m *MockDeviceShim) DeviceGroupPeerMemoryFeatures(heapIndex, localDeviceIndex, remoteDeviceIndex int) core1_1.PeerMemoryFeatureFlags {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGroupPeerMemoryFeatures", heapIndex, localDeviceIndex, remoteDeviceIndex)
	ret0, _ := ret[0].(core1_1.PeerMemoryFeatureFlags)
	return ret0
}

// DeviceGroupPeerMemoryFeatures indicates an expected call of DeviceGroupPeerMemoryFeatures.
func (mr *MockDeviceShimMockRecorder) DeviceGroupPeerMemoryFeatures(heapIndex, localDeviceIndex, remoteDeviceIndex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGroupPeerMemoryFeatures", reflect.TypeOf((*MockDeviceShim)(nil).DeviceGroupPeerMemoryFeatures), heapIndex, localDeviceIndex, remoteDeviceIndex)
}
