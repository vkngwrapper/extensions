// Code generated by MockGen. DO NOT EDIT.
// Source: shim.go

// Package mock_create_renderpass2 is a generated GoMock package.
package mock_create_renderpass2

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	common "github.com/vkngwrapper/core/v2/common"
	core1_0 "github.com/vkngwrapper/core/v2/core1_0"
	core1_2 "github.com/vkngwrapper/core/v2/core1_2"
	driver "github.com/vkngwrapper/core/v2/driver"
)

// MockCommandBufferShim is a mock of CommandBufferShim interface.
type MockCommandBufferShim struct {
	ctrl     *gomock.Controller
	recorder *MockCommandBufferShimMockRecorder
}

// MockCommandBufferShimMockRecorder is the mock recorder for MockCommandBufferShim.
type MockCommandBufferShimMockRecorder struct {
	mock *MockCommandBufferShim
}

// NewMockCommandBufferShim creates a new mock instance.
func NewMockCommandBufferShim(ctrl *gomock.Controller) *MockCommandBufferShim {
	mock := &MockCommandBufferShim{ctrl: ctrl}
	mock.recorder = &MockCommandBufferShimMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandBufferShim) EXPECT() *MockCommandBufferShimMockRecorder {
	return m.recorder
}

// CmdBeginRenderPass2 mocks base method.
func (m *MockCommandBufferShim) CmdBeginRenderPass2(renderPassBegin core1_0.RenderPassBeginInfo, subpassBegin core1_2.SubpassBeginInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CmdBeginRenderPass2", renderPassBegin, subpassBegin)
	ret0, _ := ret[0].(error)
	return ret0
}

// CmdBeginRenderPass2 indicates an expected call of CmdBeginRenderPass2.
func (mr *MockCommandBufferShimMockRecorder) CmdBeginRenderPass2(renderPassBegin, subpassBegin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdBeginRenderPass2", reflect.TypeOf((*MockCommandBufferShim)(nil).CmdBeginRenderPass2), renderPassBegin, subpassBegin)
}

// CmdEndRenderPass2 mocks base method.
func (m *MockCommandBufferShim) CmdEndRenderPass2(subpassEnd core1_2.SubpassEndInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CmdEndRenderPass2", subpassEnd)
	ret0, _ := ret[0].(error)
	return ret0
}

// CmdEndRenderPass2 indicates an expected call of CmdEndRenderPass2.
func (mr *MockCommandBufferShimMockRecorder) CmdEndRenderPass2(subpassEnd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdEndRenderPass2", reflect.TypeOf((*MockCommandBufferShim)(nil).CmdEndRenderPass2), subpassEnd)
}

// CmdNextSubpass2 mocks base method.
func (m *MockCommandBufferShim) CmdNextSubpass2(subpassBegin core1_2.SubpassBeginInfo, subpassEnd core1_2.SubpassEndInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CmdNextSubpass2", subpassBegin, subpassEnd)
	ret0, _ := ret[0].(error)
	return ret0
}

// CmdNextSubpass2 indicates an expected call of CmdNextSubpass2.
func (mr *MockCommandBufferShimMockRecorder) CmdNextSubpass2(subpassBegin, subpassEnd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdNextSubpass2", reflect.TypeOf((*MockCommandBufferShim)(nil).CmdNextSubpass2), subpassBegin, subpassEnd)
}

// MockDeviceShim is a mock of DeviceShim interface.
type MockDeviceShim struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceShimMockRecorder
}

// MockDeviceShimMockRecorder is the mock recorder for MockDeviceShim.
type MockDeviceShimMockRecorder struct {
	mock *MockDeviceShim
}

// NewMockDeviceShim creates a new mock instance.
func NewMockDeviceShim(ctrl *gomock.Controller) *MockDeviceShim {
	mock := &MockDeviceShim{ctrl: ctrl}
	mock.recorder = &MockDeviceShimMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceShim) EXPECT() *MockDeviceShimMockRecorder {
	return m.recorder
}

// CreateRenderPass2 mocks base method.
func (m *MockDeviceShim) CreateRenderPass2(allocator *driver.AllocationCallbacks, options core1_2.RenderPassCreateInfo2) (core1_0.RenderPass, common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRenderPass2", allocator, options)
	ret0, _ := ret[0].(core1_0.RenderPass)
	ret1, _ := ret[1].(common.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateRenderPass2 indicates an expected call of CreateRenderPass2.
func (mr *MockDeviceShimMockRecorder) CreateRenderPass2(allocator, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRenderPass2", reflect.TypeOf((*MockDeviceShim)(nil).CreateRenderPass2), allocator, options)
}
