// Code generated by MockGen. DO NOT EDIT.
// Source: swapchain.go

// Package mock_swapchain is a generated GoMock package.
package mock_swapchain

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	common "github.com/vkngwrapper/core/v2/common"
	core1_0 "github.com/vkngwrapper/core/v2/core1_0"
	driver "github.com/vkngwrapper/core/v2/driver"
	khr_swapchain_driver "github.com/vkngwrapper/extensions/v2/khr_swapchain/driver"
)

// MockSwapchain is a mock of Swapchain interface.
type MockSwapchain struct {
	ctrl     *gomock.Controller
	recorder *MockSwapchainMockRecorder
}

// MockSwapchainMockRecorder is the mock recorder for MockSwapchain.
type MockSwapchainMockRecorder struct {
	mock *MockSwapchain
}

// NewMockSwapchain creates a new mock instance.
func NewMockSwapchain(ctrl *gomock.Controller) *MockSwapchain {
	mock := &MockSwapchain{ctrl: ctrl}
	mock.recorder = &MockSwapchainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSwapchain) EXPECT() *MockSwapchainMockRecorder {
	return m.recorder
}

// AcquireNextImage mocks base method.
func (m *MockSwapchain) AcquireNextImage(timeout time.Duration, semaphore core1_0.Semaphore, fence core1_0.Fence) (int, common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcquireNextImage", timeout, semaphore, fence)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(common.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AcquireNextImage indicates an expected call of AcquireNextImage.
func (mr *MockSwapchainMockRecorder) AcquireNextImage(timeout, semaphore, fence interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcquireNextImage", reflect.TypeOf((*MockSwapchain)(nil).AcquireNextImage), timeout, semaphore, fence)
}

// Destroy mocks base method.
func (m *MockSwapchain) Destroy(callbacks *driver.AllocationCallbacks) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy", callbacks)
}

// Destroy indicates an expected call of Destroy.
func (mr *MockSwapchainMockRecorder) Destroy(callbacks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockSwapchain)(nil).Destroy), callbacks)
}

// Handle mocks base method.
func (m *MockSwapchain) Handle() khr_swapchain_driver.VkSwapchainKHR {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(khr_swapchain_driver.VkSwapchainKHR)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockSwapchainMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockSwapchain)(nil).Handle))
}

// SwapchainImages mocks base method.
func (m *MockSwapchain) SwapchainImages() ([]core1_0.Image, common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SwapchainImages")
	ret0, _ := ret[0].([]core1_0.Image)
	ret1, _ := ret[1].(common.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SwapchainImages indicates an expected call of SwapchainImages.
func (mr *MockSwapchainMockRecorder) SwapchainImages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwapchainImages", reflect.TypeOf((*MockSwapchain)(nil).SwapchainImages))
}
