// Code generated by MockGen. DO NOT EDIT.
// Source: shim.go

// Package mock_get_physical_device_properties2 is a generated GoMock package.
package mock_get_physical_device_properties2

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	common "github.com/vkngwrapper/core/v2/common"
	core1_0 "github.com/vkngwrapper/core/v2/core1_0"
	core1_1 "github.com/vkngwrapper/core/v2/core1_1"
)

// MockShim is a mock of Shim interface.
type MockShim struct {
	ctrl     *gomock.Controller
	recorder *MockShimMockRecorder
}

// MockShimMockRecorder is the mock recorder for MockShim.
type MockShimMockRecorder struct {
	mock *MockShim
}

// NewMockShim creates a new mock instance.
func NewMockShim(ctrl *gomock.Controller) *MockShim {
	mock := &MockShim{ctrl: ctrl}
	mock.recorder = &MockShimMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShim) EXPECT() *MockShimMockRecorder {
	return m.recorder
}

// Features2 mocks base method.
func (m *MockShim) Features2(out *core1_1.PhysicalDeviceFeatures2) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Features2", out)
	ret0, _ := ret[0].(error)
	return ret0
}

// Features2 indicates an expected call of Features2.
func (mr *MockShimMockRecorder) Features2(out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Features2", reflect.TypeOf((*MockShim)(nil).Features2), out)
}

// FormatProperties2 mocks base method.
func (m *MockShim) FormatProperties2(format core1_0.Format, out *core1_1.FormatProperties2) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatProperties2", format, out)
	ret0, _ := ret[0].(error)
	return ret0
}

// FormatProperties2 indicates an expected call of FormatProperties2.
func (mr *MockShimMockRecorder) FormatProperties2(format, out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatProperties2", reflect.TypeOf((*MockShim)(nil).FormatProperties2), format, out)
}

// ImageFormatProperties2 mocks base method.
func (m *MockShim) ImageFormatProperties2(o core1_1.PhysicalDeviceImageFormatInfo2, out *core1_1.ImageFormatProperties2) (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageFormatProperties2", o, out)
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImageFormatProperties2 indicates an expected call of ImageFormatProperties2.
func (mr *MockShimMockRecorder) ImageFormatProperties2(o, out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageFormatProperties2", reflect.TypeOf((*MockShim)(nil).ImageFormatProperties2), o, out)
}

// MemoryProperties2 mocks base method.
func (m *MockShim) MemoryProperties2(out *core1_1.PhysicalDeviceMemoryProperties2) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemoryProperties2", out)
	ret0, _ := ret[0].(error)
	return ret0
}

// MemoryProperties2 indicates an expected call of MemoryProperties2.
func (mr *MockShimMockRecorder) MemoryProperties2(out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemoryProperties2", reflect.TypeOf((*MockShim)(nil).MemoryProperties2), out)
}

// Properties2 mocks base method.
func (m *MockShim) Properties2(out *core1_1.PhysicalDeviceProperties2) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Properties2", out)
	ret0, _ := ret[0].(error)
	return ret0
}

// Properties2 indicates an expected call of Properties2.
func (mr *MockShimMockRecorder) Properties2(out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Properties2", reflect.TypeOf((*MockShim)(nil).Properties2), out)
}

// QueueFamilyProperties2 mocks base method.
func (m *MockShim) QueueFamilyProperties2(outDataFactory func() *core1_1.QueueFamilyProperties2) ([]*core1_1.QueueFamilyProperties2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueFamilyProperties2", outDataFactory)
	ret0, _ := ret[0].([]*core1_1.QueueFamilyProperties2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueFamilyProperties2 indicates an expected call of QueueFamilyProperties2.
func (mr *MockShimMockRecorder) QueueFamilyProperties2(outDataFactory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueFamilyProperties2", reflect.TypeOf((*MockShim)(nil).QueueFamilyProperties2), outDataFactory)
}

// SparseImageFormatProperties2 mocks base method.
func (m *MockShim) SparseImageFormatProperties2(o core1_1.PhysicalDeviceSparseImageFormatInfo2, outDataFactory func() *core1_1.SparseImageFormatProperties2) ([]*core1_1.SparseImageFormatProperties2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SparseImageFormatProperties2", o, outDataFactory)
	ret0, _ := ret[0].([]*core1_1.SparseImageFormatProperties2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SparseImageFormatProperties2 indicates an expected call of SparseImageFormatProperties2.
func (mr *MockShimMockRecorder) SparseImageFormatProperties2(o, outDataFactory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SparseImageFormatProperties2", reflect.TypeOf((*MockShim)(nil).SparseImageFormatProperties2), o, outDataFactory)
}
